//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Input/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""df06c4bd-b6fd-40ea-97f3-8349f44c9263"",
            ""actions"": [
                {
                    ""name"": ""ControllJoint"",
                    ""type"": ""Button"",
                    ""id"": ""7ecbbc1f-263d-432c-bb86-afd9af11c33a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6cd8fdc9-572c-4fa8-a294-5eb5a10196cc"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControllJoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Frames"",
            ""id"": ""fd280b6d-d46f-48d8-ab33-2636e02c6430"",
            ""actions"": [
                {
                    ""name"": ""NextFrame"",
                    ""type"": ""Button"",
                    ""id"": ""6b481a68-244e-4b94-a83c-c3cf532bb0f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""timeScale"",
                    ""type"": ""Button"",
                    ""id"": ""0658e383-ab09-4da2-90d4-aa3fb6786029"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0b0c643d-0c3e-43fc-b148-37902fb8ed41"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextFrame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2fe1b0a7-33ce-4376-b1e0-30536f4224b5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""timeScale"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cce50ac3-1344-4e78-87b6-0aea4bfe1de1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""timeScale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fc130b37-fdba-4498-9fe4-dcef121b183a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""timeScale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_ControllJoint = m_Player.FindAction("ControllJoint", throwIfNotFound: true);
        // Frames
        m_Frames = asset.FindActionMap("Frames", throwIfNotFound: true);
        m_Frames_NextFrame = m_Frames.FindAction("NextFrame", throwIfNotFound: true);
        m_Frames_timeScale = m_Frames.FindAction("timeScale", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_ControllJoint;
    public struct PlayerActions
    {
        private @GameInputs m_Wrapper;
        public PlayerActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ControllJoint => m_Wrapper.m_Player_ControllJoint;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @ControllJoint.started += instance.OnControllJoint;
            @ControllJoint.performed += instance.OnControllJoint;
            @ControllJoint.canceled += instance.OnControllJoint;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @ControllJoint.started -= instance.OnControllJoint;
            @ControllJoint.performed -= instance.OnControllJoint;
            @ControllJoint.canceled -= instance.OnControllJoint;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Frames
    private readonly InputActionMap m_Frames;
    private List<IFramesActions> m_FramesActionsCallbackInterfaces = new List<IFramesActions>();
    private readonly InputAction m_Frames_NextFrame;
    private readonly InputAction m_Frames_timeScale;
    public struct FramesActions
    {
        private @GameInputs m_Wrapper;
        public FramesActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextFrame => m_Wrapper.m_Frames_NextFrame;
        public InputAction @timeScale => m_Wrapper.m_Frames_timeScale;
        public InputActionMap Get() { return m_Wrapper.m_Frames; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FramesActions set) { return set.Get(); }
        public void AddCallbacks(IFramesActions instance)
        {
            if (instance == null || m_Wrapper.m_FramesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FramesActionsCallbackInterfaces.Add(instance);
            @NextFrame.started += instance.OnNextFrame;
            @NextFrame.performed += instance.OnNextFrame;
            @NextFrame.canceled += instance.OnNextFrame;
            @timeScale.started += instance.OnTimeScale;
            @timeScale.performed += instance.OnTimeScale;
            @timeScale.canceled += instance.OnTimeScale;
        }

        private void UnregisterCallbacks(IFramesActions instance)
        {
            @NextFrame.started -= instance.OnNextFrame;
            @NextFrame.performed -= instance.OnNextFrame;
            @NextFrame.canceled -= instance.OnNextFrame;
            @timeScale.started -= instance.OnTimeScale;
            @timeScale.performed -= instance.OnTimeScale;
            @timeScale.canceled -= instance.OnTimeScale;
        }

        public void RemoveCallbacks(IFramesActions instance)
        {
            if (m_Wrapper.m_FramesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFramesActions instance)
        {
            foreach (var item in m_Wrapper.m_FramesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FramesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FramesActions @Frames => new FramesActions(this);
    public interface IPlayerActions
    {
        void OnControllJoint(InputAction.CallbackContext context);
    }
    public interface IFramesActions
    {
        void OnNextFrame(InputAction.CallbackContext context);
        void OnTimeScale(InputAction.CallbackContext context);
    }
}
